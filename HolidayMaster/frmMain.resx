<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFM2KQBTNioKUjcmMVxCJVhlSCViaEolYmlLJmJoSiZiZ0kmYmdJJmJnSSZiaEomYmhK
        JmJoSiZiaEomYmhKJmJoSiZiaEomYmhKJmJoSiZiaEomYmhKJmJoSiZiaEomYl9EJlhPNCYxSC0nCkov
        JgAAAAAAAAAAAFA2JgCZfyEAVjwlKm5UJZ+KbyTkq4sm8ruYKPW9mij1vpso9cKeKfXJpSr1yaUq9cmk
        KvXBnSj1wJwo9cCcKPXAnCj1wJwo9cCcKPXAnCj1wJwo9cCcKPXAnCj1wJwo9cCcKPXAnCj1t5Qo8px8
        J+N2WSidVTkmKsmZIgBJMScAXUIlAFc8JipzWSXHhW0v/56GQ/+rkUf/rZJH/62RR/+tkkj/rZFA/9u2
        Lf//2Sv/z6wv/6+TQ/+zmEj/sZdH/7GWR/+xlkf/sZZH/7GWR/+xlkf/sZZH/7KXSP+zmEj/s5hI/7OY
        SP+zmUj/rJFG/5l7MP+EZifFVDkmKV5CJwBFKSoJc1gmn5d9JP+olmf/6uGu/+3kr//u5bD/7eSw/+je
        q//JvJL/rI42//bPKv+mijv/wLKL/9LHmv/l26n/7eSw/+3ksP/t5LD/7eSw/+3ksP/s46//0MSV/7ys
        gf+8rIH/vKyB/7ysgf+1pXz/n4RD/82pKv96XSmcNhwmCVE1JjKRdiXkwagl/6WLQf+sl2H/tqNy/+/m
        sP/o3qr/rZdg/6yRRf/Vsi7//9ks/9y4Lf+1lTX/rY43/7KfbP/477j//fW8//31vP/99bz//va9/+3k
        r/+ZgEn/sZAx/7WUMv+2lTL/wJ8z/8SiM//duC3/+9Qs/6WFKeNLMiYxXEElWaKJJfLRtyb/x6Uq/7iV
        Kf+Yezb/2Myb/9nNnP+egTn/w6At/8uoL//LqC//zKgu/8uoLv++my3/p5Fa//Trtf/99bz//PS7//z0
        u//+9r3/9u22/7alc/+vmFr/spxb/66WVf+/njL/+9Ur///ZLP//2Sz/v50q8l1BJllhRSVlqI8l9rGX
        KP+ahFf/tKJ1/76vgf/n3Kr/6d+s/8a3if+5qHv/uah7/8Gwgf/JuYj/ybmI/8q7iv/m3Kf//PS7//z0
        u//89Lv/+fC4/9zRn//RxJT/zsGS/8i7jv/JvI//vrCG/6WJQf/2zyv//9ks///aLP/HpCr2ZUgmZWFF
        JWWljCT2v6Ul/6eLOv+tk0j/rZNH/6yRRv+rkUb/rJFH/6qPRP+njEP/qJJe//Hnsv//977//va9//31
        vP/89Lv//PS7//32vP/d0qD/lHg+/6iIMP+oiTL/qYky/6mJMv+piTH/yaUp/+rDKf/qwyn/7MUp/7mW
        KPZjRyZlXEAmZX9lLfaZgDP/pYg3/6SHN/+khzf/pIc3/6SHN/+khzf/pIc4/6KFN/+eh1H/7eWu//73
        vf/99rz//fa8//32vP/99rz//ve9/+/msP+1o3H/rplh/66ZYv+umWL/rpli/66ZYv+tmGL/rJdi/6yX
        Yv+tmGP/j3hO9l5DKmVdQytlinpV9q6jdf/Iu43/y76Q/8u+kP/LvpD/y76Q/8u+kP/LvpD/y76Q/9TH
        lv/f1KD/4NSh/+DUof/g1KH/4NSh/+DUof/g1KH/4NWh/9/UoP/c0Z7/3NGf/9zRn//c0Z//3NGf/9zR
        nv/c0Z7/3NGe/97Tn/+wn3X2YkcvZVk+KWVoU0P2dmVZ/4d2av+KeG3/iXhs/4p4bf+KeG3/inht/4p4
        bf+KeG3/iHdr/4h2a/+Idmv/iHZr/4h2a/+Idmv/iHZr/4h2a/+Idmv/hnRn/4d1aP+FdGb/hnVo/4Nw
        Y/+EcWT/iHZq/4h3a/+Id2v/iXhs/3djVPZbQCtlWj8sZW5cWvaAdHr/npOa/5+Umv+glZr/mo6S/5qO
        kv+ajpL/mo6S/5yQlf+imaD/o5qh/6OZof+jmaH/o5mh/6OZof+jmaH/o5mh/6OZof+Uhoj/mYyQ/5KF
        hv+YjI//gW9q/4V1cP+glZz/o5mh/6OZof+kmqL/inp49l1DL2VaPytlaldS9nNjYf+PgYL/i3t7/4t9
        fP91YVf/dGBW/3RgVv91YVf/gG5o/5uPkf+dkpb/nJCV/5yRlv+ckZb/nJGW/5yRlv+ckZb/nZKX/5uP
        k/+dkZb/nJGV/52Rlv+YjJD/mY2R/52Sl/+ek5j/npOY/5+Umv+GdnL2XUMvZVtAKWV2YkX2jHta/5+O
        bv+djW7/nIps/5uJav+biWr/nYts/5J/Y/9rWFH/aFpd/3tmVP+aiGz/nIpv/5iGa/+Yhmv/mIZr/5iG
        a/+aiG7/lYNq/3ZiVP9jU1P/eWVW/5aEbP+WhG3/k4Bq/5J/av+Sf2r/k4Fs/39qVPZcQStlYEctZaOW
        ZfbUzpH/9Oyy//futv/27bX/9u21//bttf/477b/2MuZ/2ZWUP9ZT17/oI9u//XstP/067T/8+qy//Pq
        sv/z6rL/8+qy//Pqsv/v5a7/kH9k/0I+V/+Le2H/7eOs//Hosf/w57D/8Oaw//DmsP/y6LL/va2B9mNJ
        MGVhRy1lpJhn9tfSlf/48Lf//PW7//z1u//89bv//PW7//73vf/Wypj/W05O/09ES/+5qoH///i+//31
        vP/99bz//fW8//31vP/99bz//fW8///3vv+tnXj/Tj9B/4h2XP/17LX//va9//31vP/99bz//fW8///3
        vv/Ft4n2ZUoxZWFHLWWkmGf219KV//jxt//89Lv//PS7//z0u//89Lv//ve9/8S2iv9QSFb/WE5W/9jL
        mv/+9r3//PS7//z0u//89Lv//PS7//z0u//89Lv//va9/8y+j/9jV1v/eWth/+7krv/99bz//PS7//z0
        u//89Lv//va9/8W2ifZlSjFlYUctZaSYZ/bX0pX/+PG3//z0u//89Lv//PS7//31vP//973/rZ13/1VG
        SP90YlD/7eSt//31vP/89Lv//PS7//z0u//89Lv//PS7//z0u//99bz/6N6o/3BeUf9mU0n/4NSh//32
        vP/99bz//PS7//z0u//+9r3/xbaJ9mVKMWVhRy1lpJhn9tfSlf/58bj//fW8//z0u//99bz/9+62//Pq
        sv+Whm3/W1Zv/5qKbf/58bj//PS7//z0u//89Lv//PS7//z0u//89Lv//PS7//z0u//477f/kH9l/1BF
        TP+un3j/saJ4/+bbp//99bz/9ey1//31vP/Ft4n2ZUoxZWFHLWWkmGf22NKV//DosP/27bX//fW8/+DW
        o/+UimT/vK+C/3RiUP9cTE3/wbOJ///3vf/89Lv//PS7//z0u//89Lv//PS7//z0u//89Lv//PS7//fu
        tv+xonz/UEVO/4BtVv9QY0D/hY1k/+vgq/+ejWj/29Ce/8e4ivZlSjFlYUctZaWYaPbVz5L/oZVt/7eq
        fv/167T/fpVq/0OHWv+Wh2T/VktS/2laUf/bzpz/+vK5//z0u//89Lv//PS7//z0u//89Lv//PS7//z0
        u//+9r3/xruN/3RoSP9XRkP/WkZD/zNxRv9DgVP/pZZu/0JqQ/+opnr/x7iK9mVLMWVhRy1lpplo9sa9
        hP9Wg1j/ZYxg/8ezh/9DnWn/Malv/2hXRP9KQlT/dmVO/4Z6V//d0p///va8//z0u//89Lv//fa8//72
        vf/99bv//PS7///3vf/BuIn/OHFH/z9cPv9SPj7/LHhN/zJ4S/9HakT/GYxW/6Khdv/HuIr2ZUsxZWFH
        LWWmmmn2wLN9/0GWY/8iu3v/b25M/zigav8lr3L/TUZE/09BRf9Cd03/Roha/9XHlv/+9r3//PS7//31
        vP/Wypn/yr2O//Xstf/89Lv/+vG5/+PVov9le1T/JIJQ/z1iQf8khlT/IIlV/x2LVv9MfVL/1sua/8e5
        i/ZlSjFlYUctZaWZaPbNxIr/bo1i/xbMh/8ummX/MZVh/x+9fP9NTUH/O31Y/xvCf/9kkWT/7OCr//72
        vf/99bz/6N6p/6SSa/+yoXj/49ik//rxuf+zpXr/f4hg/1t0Tv8udUj/Fpde/wuoaP8LqGj/NWxD/2dn
        Rv+klm7/saB39mdNNGVhRy1lpJdn9tDKj/++sYT/U39W/yK0dv8Yz4j/FdSM/yyhav8ktHb/SHVN/6qY
        cP/k1qP/6+Gs//vzuv/z6rP/7eOt//z1vP/787v//fS7/7yxhP8+dEr/E5Ja/yeGU/8/ZkD/H4xW/zR+
        UP8rhFP/PHVL/5KLZf+5qH32Z00zZWFILmWilGX2kYVb/19/V/9Dg1f/LJ1m/xDdkf8Q4JP/G8aD/x6+
        ff8xnmj/QJ5p/0qHWv+Sh2L/9ey1//72vP/477f/+fG5//z1u//89Lv/+O+3/8O8jP+ZmXD/n5Rs/0tw
        Sf8+e07/t6d8/7q0hv/LwZH/9ey1/8a3ifZkSjFlXEIqWaGUZPK0q3b/aodd/zWia/8yqnD/Q45f/yax
        df87g1b/R4VY/x2+fP8Ww4D/S5Fh/8i/kP/+9bz/8umy/6ubcv+zonn/9Ou0//z1u//99bz///i+//71
        vP+2qH3/TWVB/5OXbP/37bb///e+//72vf//977/va6C8VxBKlhPMyAyjn1V5M/JjP/h16D/yL+Q/8W8
        jf/Lt4r/SZdl/y+ka/+ekWr/p6Z6/56hdf/Rx5b/+/K5//32vP/h1qP/xbaJ/9zRnv/27bb//fW8/+fd
        qP/GuIr/7+aw/9fMmv/Lvo//8+my//31vP/89Lv//PS7//rxuf+kkmziSi4aMT8hFAlwWTqes6lz/+Pe
        of/+9rz///e9//rwuP+aoHT/M5Jf/3iHX//z57H//vW8//72vP/89Lv//PS7//vzuv/89Lv//va8//31
        vP/37rb/sqJ5/6qYcf/azpz///e9//72vf/99bz//PS7//z0u//+9r3/18ua/3hhQ5s0FgUJXEIqAFQ4
        Iyp8aETHtat2/+ffpf/89Lv///e+//Lpsv+1roH/npNs/+rfq///977//va9//72vf/+9r3//va9//72
        vf/+9r3//va9//vzu//u5a///fW8//31vP/+9r3//va9//72vf/+9r3/+vG5/9fLmv+KdVTFUTYhKl1E
        LABQNSAAkHdSAFQ5IypwWTuekoFY5LSlePLDtYf1x7iL9ci5jPXEtYj1xriK9ce4i/XHuIv1x7iL9ce4
        i/XHuIv1x7iL9ce4i/XHuIv1x7iL9ci6jPXHuIv1x7iL9ce4i/XHuIv1x7iL9b6vg/Gkk2zid2FDnFA1
        ISq7qHYARisaAAAAAAAAAAAASSsaAEcpGQpOMR4yWkAoWWNIMGJmSzJiZ0wzYmdNNGJnTDNiZkwzYmZM
        M2JmTDNiZkwzYmZMM2JmTDNiZkwzYmZMM2JmTDNiZkwzYmZMM2JmTDNiZkwzYmZMM2JmTDNiXEIrWEou
        GjE/IhAKQiUSAAAAAAAAAAAA4AAAB8AAAAOAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAABwAAAA+AAAAc=
</value>
  </data>
</root>